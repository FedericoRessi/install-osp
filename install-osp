#!/bin/bash

set -eu

TARGET_HOST_DIR=${TARGET_HOST_DIR:-$(pwd)/.install-osp}
mkdir -p "${TARGET_HOST_DIR}"

TARGET_HOST_FILE=${TARGET_HOST_FILE:-${TARGET_HOST_DIR}/host}
if ! [ -f "${TARGET_HOST_FILE}" ]; then
    # Remove host from remote host just in case
    (
        grep -v "${TARGET_HOST}" ~/.ssh/known_hosts > ~/.ssh/known_hosts.tmp
        mv ~/.ssh/known_hosts.tmp ~/.ssh/known_hosts
    ) || true
fi


declare -a PLAYBOOK_NAMES
while (( $# > 0 )); do
    arg="$1"
    shift

    case $arg in
        -t|--target)
        TARGET_HOST="$1"
        shift
        ;;

        -*)
        echo "
            Invalid option: $arg
                $0 [-t <target-host>] [<play-book-names...>]
        "
        exit 1
        ;;

        *)
        PLAYBOOK_NAMES+=("${arg}") # save it in an array for later
        ;;
    esac
done


# Get target host from file if not given
TARGET_HOST=${TARGET_HOST:-$(cat "${TARGET_HOST_FILE}" || true)}
if [ "${TARGET_HOST}" == "" ]; then
	echo "
		Please specify at least one target host name:
            $0 -t <target-host> [<play-book-names...>]
	"
	exit 2
fi

# Save target host to file for later use
echo "${TARGET_HOST}" > "${TARGET_HOST_FILE}"


# Generate SSH config file
TARGET_PORT=${TARGET_PORT:-22}
TARGET_USER=${TARGET_USER:-root}
SSH_CONFIG_FILE=${SSH_CONFIG_FILE:-${TARGET_HOST_DIR}/ssh_config}
echo "
Host target
    HostName ${TARGET_HOST} 
    Port ${TARGET_PORT}
    User ${TARGET_USER}
    StrictHostKeyChecking no
" > "${SSH_CONFIG_FILE}"


# Generate ansible config file
ANSIBLE_CONFIG_FILE=${ANSIBLE_CONFIG_FILE:-${TARGET_HOST_DIR}/ansible.cfg}
echo "
[ssh_connection]
ssh_args = -F '${SSH_CONFIG_FILE}'
" > "${ANSIBLE_CONFIG_FILE}"


# Generate hosts.ini
ANSIBLE_INVENTORY_FILE=${ANSIBLE_INVENTORY_FILE:-${TARGET_HOST_DIR}/hosts.ini}
echo "[target]
${TARGET_HOST}:${TARGET_PORT}
" > "${ANSIBLE_INVENTORY_FILE}"


# Detect SSH key file and creates it if not found
SSH_KEY_FILES=($(ls ~/.ssh/id_rsa ~/.ssh/id_dsa 2> /dev/null || true) ~/.ssh/id_rsa)
TARGET_KEY_FILE=${TARGET_KEY_FILE:-${SSH_KEY_FILES[0]}}
[ -r "${TARGET_KEY_FILE}" ] || ssh-keygen -P "" -f "${TARGET_KEY_FILE}"


# Install SSH key file
export TARGET_PUB_KEY=$(cat "${TARGET_KEY_FILE}.pub")
ssh -F "${SSH_CONFIG_FILE}" target "
set -eu
mkdir -p ~/.ssh
chown -fR \${USER}.\${USER} ~/.ssh
chmod 700 ~/.ssh
if ! grep -q -e '${TARGET_PUB_KEY}' ~/.ssh/authorized_keys; then
	echo '${TARGET_PUB_KEY}' >> ~/.ssh/authorized_keys
fi
chmod 600 ~/.ssh/authorized_keys
"

# Get playbooks dir
PLAYBOOK_DIR=${PLAYBOOK_DIR:-./playbooks}

# Get playbooks names
if (( ${#PLAYBOOK_NAMES[@]} == 0 )); then
    PLAYBOOK_NAMES=("*")
fi

PLAYBOOK_FIND_OPTIONS=($(
    for name in "${PLAYBOOK_NAMES[@]}"; do
        echo -name "*-${name}.yml"
    done
))

PLAYBOOK_FILES=($(
    find "${PLAYBOOK_DIR}" "${PLAYBOOK_FIND_OPTIONS[@]}"
))
if (( ${#PLAYBOOK_FILES[@]} == 0 )); then
    echo "Invalid playbook name(s): ${PLAYBOOK_NAMES[@]}"
    exit 3
fi


PLAYBOOK_OPTIONS=(
    "--ssh-extra-args=-F '${SSH_CONFIG_FILE}'"
    -u "${TARGET_USER}"
    -i "${ANSIBLE_INVENTORY_FILE}"
)

# Run ansible playbooks
for playbook_file in "${PLAYBOOK_FILES[@]}"; do
    echo "Execute playbook ${playbook_file}"
    ansible-playbook "${PLAYBOOK_OPTIONS[@]}" "${playbook_file}"
done
