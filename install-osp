#!/bin/bash

set -eu

export INSTALL_OSP_DIR=$(dirname $(realpath "$0"))

export TARGET_HOST_DIR=${TARGET_HOST_DIR:-$(pwd)/.install-osp}
mkdir -p "${TARGET_HOST_DIR}"

TARGET_HOST_FILE=${TARGET_HOST_FILE:-${TARGET_HOST_DIR}/host}
if ! [ -f "${TARGET_HOST_FILE}" ]; then
    # Remove host from remote host just in case
    (
        grep -v "${TARGET_HOST}" ~/.ssh/known_hosts > ~/.ssh/known_hosts.tmp
        mv ~/.ssh/known_hosts.tmp ~/.ssh/known_hosts
    ) || true
fi


declare -a PLAYBOOK_NAMES
while (( $# > 0 )); do
    arg="$1"
    shift

    case $arg in
        -h|--hypervisor)
        TARGET_HOST="$1"
        shift
        ;;

        -*)
        echo "
            Invalid option: $arg
                $0 [-h <hypervisor-host>] [<play-book-names...>]
        "
        exit 1
        ;;

        *)
        PLAYBOOK_NAMES+=("${arg}") # save it in an array for later
        ;;
    esac
done


# Get hypervisor host from file if not given
TARGET_HOST=${TARGET_HOST:-$(cat "${TARGET_HOST_FILE}" || true)}
if [ "${TARGET_HOST}" == "" ]; then
	echo "
		Please specify at least one hypervisor host name:
            $0 -t <hypervisor-host> [<play-book-names...>]
	"
	exit 2
fi

# Save hypervisor host to file for later use
echo "${TARGET_HOST}" > "${TARGET_HOST_FILE}"

# Detect SSH key file and creates it if not found
export SSH_IDENTITY_FILE=${SSH_IDENTITY_FILE:-${TARGET_HOST_DIR}/id_rsa}
[ -r "${SSH_IDENTITY_FILE}" ] || ssh-keygen -P "" -f "${SSH_IDENTITY_FILE}"


# Generate SSH config file
TARGET_PORT=${TARGET_PORT:-22}
TARGET_USER=${TARGET_USER:-root}
SSH_CONFIG_FILE=${SSH_CONFIG_FILE:-${TARGET_HOST_DIR}/ssh_config}
echo "
Host hypervisor
    HostName ${TARGET_HOST}
    User ${TARGET_USER}
    Port ${TARGET_PORT}
    StrictHostKeyChecking no
    IdentityFile ${SSH_IDENTITY_FILE}

Host undercloud
    HostName undercloud
    User ${TARGET_USER}
    Port ${TARGET_PORT}
    StrictHostKeyChecking no
    IdentityFile ${SSH_IDENTITY_FILE}
    ProxyJump hypervisor

" > "${SSH_CONFIG_FILE}"


# Generate ansible config file
ANSIBLE_CONFIG_FILE=${ANSIBLE_CONFIG_FILE:-${TARGET_HOST_DIR}/ansible.cfg}
echo "
[ssh_connection]
ssh_args = -F '${SSH_CONFIG_FILE}'
" > "${ANSIBLE_CONFIG_FILE}"


# Generate hosts.ini
ANSIBLE_INVENTORY_FILE=${ANSIBLE_INVENTORY_FILE:-${TARGET_HOST_DIR}/hosts.ini}
echo "
[metal]
hypervisor

[cloud]
undercloud

" > "${ANSIBLE_INVENTORY_FILE}"


# Install SSH key file
ssh-copy-id -i "${SSH_IDENTITY_FILE}.pub" "${TARGET_USER}@${TARGET_HOST}"


# Get playbooks dir
PLAYBOOK_DIR=${PLAYBOOK_DIR:-${INSTALL_OSP_DIR}}

# Get playbooks names
if (( ${#PLAYBOOK_NAMES[@]} == 0 )); then
    PLAYBOOK_NAMES=("*")
fi

PLAYBOOK_FILES=($(
    for name in "${PLAYBOOK_NAMES[@]}"; do
        find "${PLAYBOOK_DIR}" -name "*-${name}.yml"
    done | sort -u
))


if (( ${#PLAYBOOK_FILES[@]} == 0 )); then
    echo "Invalid playbook name(s): ${PLAYBOOK_NAMES[@]}"
    exit 3
fi

PLAYBOOK_OPTIONS=(
    "--ssh-common-args=-F '${SSH_CONFIG_FILE}'"
    -u "${TARGET_USER}"
    -i "${ANSIBLE_INVENTORY_FILE}"
)

# Run ansible playbooks
for playbook_file in "${PLAYBOOK_FILES[@]}"; do
    echo "Execute playbook ${playbook_file}"
    ansible-playbook "${PLAYBOOK_OPTIONS[@]}" "${playbook_file}"
done
